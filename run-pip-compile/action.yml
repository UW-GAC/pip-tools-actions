name: "Run pip-compile"
description: "Install pip-tools and run pip-compile on a set of requirements files."
inputs:
  requirements_files:
    description: |-
      The paths to the requirements files to compile. Files will be compiled
      in the order they are listed. To specify multiple files, use the following
      syntax:

      requirements_files: |-
        path/to/requirements1.txt
        path/to/requirements2.txt
    required: true
  pip-tools-version:
    description: "The version of pip-tools to install. If not specified, the most recent version will be installed."
    required: false
    default: ""
  pip-compile-args:
    description: "Additional arguments to pass to pip-compile."
    required: false
    default: ""
outputs:
  files_changed:
    description: "A flag indicating whether the requirements files have changed."
    value: ${{ steps.pip-compile-changes.outputs.FILES_CHANGED }}

runs:
  using: "composite"
  steps:

      - name: Symlink current action repo
        env:
          action_path: ${{ github.action_path }}
        run: |
          if [[ ! -d /home/runner/work/_actions/current ]]; then ln -fs $(realpath ../)  /home/runner/work/_actions/current; fi
        shell: bash

      - name: Set up pip-tools
        uses: ./../../_actions/current/setup-pip-tools
        with:
          pip-tools-version: ${{ inputs.pip-tools-version }}

      # For now, just run on a single file in a specific location.
      # Later, we can make this an input to the workflow.
      - name: Run pip-compile
        id: run-pip-compile
        run: |
          for i in $INPUT_REQUIREMENTS_FILES
          do
            echo "Compiling $i"
            pip-compile $INPUT_PIP_COMPILE_ARGS $i
          done
        shell: bash
        env:
          INPUT_REQUIREMENTS_FILES: ${{ inputs.requirements_files }}
          INPUTS_PIP_COMPILE_ARGS: ${{ inputs.pip_compile_args }}

      - name: Set output
        id: pip-compile-changes
        run: |
          function check() {
            if [[ -z "$(git status --porcelain $STATUS_ARGS $PATHSPEC)" ]];
            then
              echo "0"
            else
              echo "1"
            fi
          }

          echo "FILES_CHANGED=$(check)" >> $GITHUB_OUTPUT
        shell: bash

      - name: List changes
        if: steps.pip-compile-changes.outputs.FILES_CHANGED
        run: |
          git status
          git diff
        shell: bash
